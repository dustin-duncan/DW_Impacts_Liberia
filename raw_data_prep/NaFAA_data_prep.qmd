---
title: "Fisheries Stock Assessment Using NaFAA Data"
author: "Dustin Duncan"
format: 
  html:
    code-fold: true
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r}
library(tidyverse)
# install.packages("nloptr")
library(nloptr)
library(knitr)
# devtools::install_github("cfree14/datalimited2")
library(datalimited2) # Package containing functions for use in Data-limited fisheries stock assessment 
# ?cmsy2 # Could be useful to use 
# ?bsm # Likely wouldn't work because we need a time series of biomasss data as well 
# ?zbrt # Could also be useful to use 
# ?ocom # Could be useful but would need a natural mortality (1/yr are the units)
# ?rorcs # Would be difficult to use because of the required attributes 
# ?ms_cmsy # Beta version. But would be useful for a multispecies approach 
```

## Industrial Fleet Dataprep

Note: For now, we will only be focusing on the Sardinella *aurita* species, although we have created a vector of the species that are present in both DWF and SSF data in case we apply the model to additional species

```{r reading in DWF data}
dwf_ts <- readxl::read_xlsx("../data_raw/data_NaFAA/Time_series_Production_data.xlsx", sheet = "Industrial prod 2018-2023", skip = 3, n_max = 76, col_types = c("text", "numeric","numeric","numeric","numeric","numeric","numeric","numeric")) %>% 
  rename(Species = ...1)
view(dwf_ts)

```

```{r cleaning DWF data}
# Tidying the dwf_ts dataframe 
dwf_aurita <- dwf_ts %>% 
  filter(Species %in% c("Sardinella aurita", "Sardinella")) %>% # Filtering relevant species 
  select(-c(`Grand Total`)) %>% # Removing "Grand Total" column to obtain time series
  pivot_longer(cols = -Species, names_to = "Year", values_to = "Catch") %>%  
  # Pivoting to tidy format
  mutate(Year=as.numeric(Year)) # %>% drop_na() # Missing the year 2023. UGH but at least the grand total still matches
  

# Isolating the grand total of S. aurita catch from the 'dwf_ts' dataframe
grand_total_df <- as.data.frame(dwf_ts[dwf_ts$Species == c("Sardinella", "Sardinella aurita"), c(1,8)])

grand_total = grand_total_df[1,2] + grand_total_df[2,2]
# Check to ensure that the values present in the time series dataframe match the grand total in the dwf_ts dataframe 
sum(dwf_aurita$Catch) == grand_total

```

Tidying one last bit then writing to csv as most recent timeseries

```{r}
# Need: Country Fleet Year Catch_tonnes, then write it out as csv. The other data is aggregated for Sardinella spp. so thats what will be used regardless
head(dwf_aurita)
Nafaa_dwf_writeout <- dwf_aurita %>% 
  mutate(Catch = case_when(
    is.na(Catch) ~ 0,
    .default = Catch
  )) %>% 
  group_by(Year) %>% 
  summarise(Catch = sum(Catch)) %>% 
  mutate(Country = "Liberia",
         Fleet = "Industrial") %>% 
  relocate(Country, .before = Year) %>% 
  relocate(Fleet, .before = Year) %>% 
  mutate(Catch_tonnes = Catch/1000) %>% 
  select(-Catch) %>% 
  mutate(Catch_tonnes = round(Catch_tonnes))

# Going to save this for later writeout once I have bound it with the ssf data 
```

## Artisanal Fleet Dataprep

```{r reading in SSF data}
ssf_ts <- readxl::read_xlsx("../data_raw/data_NaFAA/Time_series_Production_data.xlsx", sheet = "Artisanal prod 2018-2023", skip = 3, n_max = 106, col_types = c("text", "numeric","numeric","numeric","numeric","numeric","numeric","numeric")) %>% 
  rename(Species = ...1)
view(ssf_ts)
```

```{r cleaning SSF data}
# Tidying the ssf_ts dataframe 
ssf_aurita <- ssf_ts %>% 
  filter(Species %in% c("Sardinella aurita", "Sardinella maderensis")) %>% # Filtering relevant species 
  select(-c(`Grand Total`)) %>% # Removing "Grand Total" column to obtain time series
  pivot_longer(cols = -Species, names_to = "Year", values_to = "Catch") %>%  
  # Pivoting to tidy format
  mutate(Year=as.numeric(Year))

# Isolating the grand total of S. aurita catch from the 'dwf_ts' dataframe
grand_total_df <- as.data.frame(ssf_ts[ssf_ts$Species == c("Sardinella aurita","Sardinella maderensis"), c(1,8)])

grand_total = grand_total_df[1,2] + grand_total_df[2,2]

# Check to ensure that the values present in the time series dataframe match the grand total in the dwf_ts dataframe 
sum(ssf_aurita$Catch) == grand_total

```

### Writing out the 2018 to 2023 timeseries as csv

```{r}
head(ssf_aurita)
Nafaa_ssf_writeout <- ssf_aurita %>% 
  group_by(Year) %>% 
  summarise(Catch = sum(Catch)) %>% 
  mutate(Country = "Liberia",
         Fleet = "Artisanal") %>% 
  relocate(Country, .before = Year) %>% 
  relocate(Fleet, .before = Year) %>% 
  mutate(Catch_tonnes = Catch/1000,
         Catch_tonnes = round(Catch_tonnes)) %>% 
  select(-Catch)

Nafaa_ag_writeout = Nafaa_dwf_writeout %>% 
  rbind(Nafaa_ssf_writeout) %>% 
  mutate(Year = as.integer(Year),
         Catch_tonnes = as.integer(Catch_tonnes))

# write_csv(Nafaa_ag_writeout, here::here("data_int/data_NaFAA/catch_timeseries_2018_2023.csv"))
# test = read.csv(here::here("data_int/data_NaFAA/catch_timeseries_2018_2023.csv"))
```

## Combining NaFAA data with catch timeseries from 1990-2017 from FAO.

Due to the civil war in Liberia occuring from 1989 - 2003 and having a large impact on fisheries activities, I think it would be prudent to use the FAO catch data from after 2003. In addition, the FAO catch data is for Sardinella spp., rather than Sardinella aurita, so I will be using the above data to estimate proportion of Sardinella aurita in catch as compared to Sardinella maderensis, to dis-aggregate the FAO data into S. aurita and S. maderensis.

### Estimating proportion of S. aurita to S. maderensis from NaFAA data.

```{r}
ssf_both <- ssf_ts %>% 
  filter(Species %in% c("Sardinella maderensis")) %>% # Filtering relevant species 
  select(-c(`Grand Total`)) %>% # Removing "Grand Total" column to obtain time series
  pivot_longer(cols = -Species, names_to = "Year", values_to = "Catch") %>%  
  # Pivoting to tidy format
  mutate(Year=as.numeric(Year)) %>% 
  rename(S_mad = Species) %>% 
  rename(C_mad = Catch) %>% 
  full_join(x=., y=ssf_aurita, by="Year") %>% 
  mutate(S_aur_to_S_mad = Catch/C_mad) 

avg_ssf_ratio = mean(ssf_both$S_aur_to_S_mad) # 0.21

dwf_both <- dwf_ts %>% 
  filter(Species %in% c("Sardinella")) %>% # Filtering relevant species 
  select(-c(`Grand Total`)) %>% # Removing "Grand Total" column to obtain time series
  pivot_longer(cols = -Species, names_to = "Year", values_to = "Catch") %>%  
  # Pivoting to tidy format
  mutate(Year=as.numeric(Year) )%>% 
  rename(S_mad = Species) %>% 
  rename(C_mad = Catch) %>% 
  full_join(x=., y=dwf_aurita, by="Year")  %>% 
  mutate(S_aur_to_S_mad = Catch/C_mad)

avg_dwf_ratio = mean(dwf_both$S_aur_to_S_mad, na.rm = TRUE) # 6.72 - pretty large disparity 
# The estimate from the FAO Cote d'Ivoir data (for industrial) was 9.68. Averaging this and the above ratio gives a ratio of 8.2 aurita to one unit maderensis
```

### Using estimate of 8.2 to get an estimate of S. aurita from the Liberia catch time-series data from FAO

```{r}
catch_ts = read.csv(here::here("data_int/data_FAO/catch_timeseries_1990_2017.csv")) %>% 
  mutate(Catch = Catch_tonnes*1000) 

catch_disag = catch_ts %>% 
  mutate(C_aur = case_when(
    Fleet == "Artisanal" ~ (Catch - (Catch/1.21)),
    Fleet == "Industrial" ~ (Catch - (Catch/9.2))
  ))

ts_ssf_aur = catch_disag %>% 
  filter(Fleet %in% "Artisanal") %>% 
  select(-c(X, Country, Fleet, Catch_tonnes, Catch)) %>% 
  mutate(Species = "Sardinella aurita") %>% 
  relocate(Species, .before = Year) %>% 
  rename(Catch = C_aur) %>% 
  mutate(Year= as.numeric(Year)) %>% 
  rbind(ssf_aurita)

ts_dwf_aur = catch_disag %>% 
  filter(Fleet %in% "Industrial") %>% 
  select(-c(X, Country, Fleet, Catch_tonnes, Catch)) %>% 
  mutate(Species = "Sardinella aurita") %>% 
  relocate(Species, .before = Year) %>% 
  rename(Catch = C_aur) %>% 
  mutate(Year= as.numeric(Year)) %>% 
  rbind(dwf_aurita)

# Time to visualize this.

ggplot(catch_ts) +
  geom_line(aes(x=Year, y=Catch, color =Fleet)) +
  theme_bw() + 
  labs(x="Year", y = "Catch (kg)")

```

### Using Chris Free's 'datalimited2' package to conduct preliminary DWF stock assessment

```{r DWF Data Limited Stock assessment, fig.height=6}
# ?cmsy2 # Could be useful to use. Takes time series of years (year), time series of catch (catch) and ideally the species intrinsic growth rate, r (r.low, r.hi)

## According to Thorson, Predicting recruitment density dependence... https://onlinelibrary.wiley.com/doi/full/10.1111/faf.12427?_gl=1*1pfgsds*_gcl_au*MTQzNTIzNDc2OC4xNzI3ODk0NDI0LjIxODYyMDgyMy4xNzI4NDI3MDk5LjE3Mjg0MjcwOTk. , the Clupeiformes exhibit a mean intrinsic growth rate of 0.61 with a standard devation of 0.96, 

## The mean prediction for r for S. aurita here was 0.6241839, so I am going to test the cmsy2 method of stock assessment with both a uniform sd and narrowed sd. 

# With standard deviation of r = 0.05
auritus_dwf_traits <- cmsy2(year=dwf_aurita$Year, catch=dwf_aurita$Catch, r.low=0.47, r.hi=0.77)

plot_dlm(auritus_dwf_traits)
options(scipen=999)
ref_pts <- auritus_dwf_traits[["ref_pts"]]
ref_ts <- auritus_dwf_traits[["ref_ts"]]

viable_k_values <- auritus_dwf_traits[["k_viable"]]
mean_k <- mean(viable_k_values)*1000

# Now lets try to find S. aurita's intrinsic growth rate 
# remotes::install_github("James-Thorson-NOAA/FishLife")
library(FishLife)
Taxa = Search_species(Genus = "Sardinella",
                      Species = "aurita")$match_taxonomy
Predict = Plot_taxa( Taxa[1],
                     mfrow=c(2,3)) # This creates an object that hosts both "Cov_pred" matrix (estimated covariance between paramters) as well as "Mean_pred" matrix (matrix of empirical Bayes predictions of traits for each taxonomic group. 
# ?Plot_taxa

mean_pred <- as.data.frame(Predict[[1]]["Mean_pred"])

# KEY FOR MEAN_PRED
# K = Relative Growth Rate  
# M = Mortality Rate
# Winfinity(W_inf) = Asymptotic mass 
# Loo (L_inf) = Asymptotic Length 
# tmax (A_max) = Maximum age
# tm (A_mat) = Age at maturity
# Lm (L_mat) = Length at maturity
# Temperature = Average temperature
# ln_margsd (Sigma_R) = SD of recruitment
# rho = Recruitment Autocorrelation
# logitbound_h (h) = Steepness or Recruitment Productivity
# ln_r (r) = Intrinsic growth rate 

# ?zbrt # Could also be useful to use 
# ?ocom # Could be useful but would need a natural mortality (1/yr are the units)
```

```{r SSF Data Limited Stock assessment}
# ?cmsy2 # Could be useful to use 
# ?zbrt # Could also be useful to use 
# ?ocom # Could be useful but would need a natural mortality (1/yr are the units)

ssf_aurita_traits <- cmsy2(year = ssf_aurita$Year, catch = ssf_aurita$Catch, r.low = 0.47, r.hi=0.77)

plot_dlm(ssf_aurita_traits)
```

```{r Parameter storing }
options(scipen=999)
ssf_ref_pts <- ssf_aurita_traits[["ref_pts"]]
ssf_ref_ts <- ssf_aurita_traits[["ref_ts"]]
ssf_viable_k_values <- ssf_aurita_traits[["k_viable"]]
ssf_mean_k <- mean(ssf_viable_k_values)*1000
```

## Identifying Species Harvested by both DWF and SSF

```{r}
spp_in_both_dwf <- dwf_ts %>% 
  select(Species, paste0("20", seq(from=18,to=23))) %>% 
  filter(Species %in% ssf_ts$Species) %>% 
  filter(!Species %in% "Grand Total") %>%
  na.omit()
spp_in_both_ssf <- ssf_ts %>% 
  select(Species, paste0("20", seq(from=18,to=23))) %>% 
  filter(Species %in% dwf_ts$Species) %>% 
  na.omit()

overall_spp_in_both <- spp_in_both_ssf %>% 
  filter(Species %in% spp_in_both_dwf$Species) 

spp_vector <- overall_spp_in_both$Species[1:12]

ssf_test <- ssf_ts %>% 
  filter(Species %in% spp_vector) %>% 
  mutate(fleet="SSF")

dwf_test <- dwf_ts %>% 
  filter(Species %in% spp_vector) %>% 
  mutate(fleet="DWF") 

## Leaving this but this is only here to write out plots for CI
# both_catch = ssf_test %>% 
#   rbind(dwf_test) %>% 
#   select(-c(`Grand Total`)) %>% 
#   pivot_longer(cols =c(`2018`, `2019`, `2020`, `2021`, `2022`, `2023`), names_to="year", values_to="catch_kg") %>% 
#   mutate(year = as.numeric(year))
# 
# 
# spp_list = unique(both_catch$Species) 
# spp_list = spp_list[c(1:8,10:11)]
# 
# Brotula_barbata =ggplot(filter(both_catch, Species %in% spp_list[1]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[1]))
# 
# Chloroscombrus_chrysurus = ggplot(filter(both_catch, Species %in% spp_list[2]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[2]))
# 
# Cynoglossus_senegalensis = ggplot(filter(both_catch, Species %in% spp_list[3]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[3]))
# 
# Dasyatis_margarita = ggplot(filter(both_catch, Species %in% spp_list[4]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[4]))
# 
# Galeoides_decadactylus = ggplot(filter(both_catch, Species %in% spp_list[5]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[5]))
# 
# Osteichthyes = ggplot(filter(both_catch, Species %in% spp_list[6]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[6]))
# 
# Pomadasys_jubelini = ggplot(filter(both_catch, Species %in% spp_list[7]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[7]))
# 
# Pseudotolithus_typus = ggplot(filter(both_catch, Species %in% spp_list[8]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[8]))
# 
# new_sard = Nafaa_ag_writeout %>% 
#   mutate(Species = "Sardinella spp",
#          catch_kg = Catch_tonnes*1000,
#          fleet = case_when(
#            Fleet == "Artisanal" ~ "SSF", 
#            Fleet == "Industrial" ~ "DWF"
#          ))
# 
# Sardinella_spp = ggplot(new_sard, aes(x=Year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle("Sardinella spp.")
# 
# Scomberomorus_tritor = ggplot(filter(both_catch, Species %in% spp_list[10]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[10]))
# 
# Sphyraena_guachancho = ggplot(filter(both_catch, Species %in% spp_list[11]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[11]))
# 
# Trichiurus_lepturus = ggplot(filter(both_catch, Species %in% spp_list[12]), aes(x=year, y = catch_kg, color=fleet)) + 
#   geom_line() +
#   labs(x = "Year", y = "Catch (kg)") +
#   ggtitle(paste(spp_list[12]))
# 
# for(i in 1:length(spp_list)) {
#   plot = str_replace(spp_list[i], " ", "_")
#   ggsave(filename=paste0("../plots/", plot, ".png"), plot=get(plot))
# }
# 
# ggsave(filename="../plots/Sardinella_spp.png", plot=Sardinella_spp)

print(spp_vector)
resilience_table <- resilience(species=spp_vector[1:12])
resilience_table[11,1] = c("Dasyatis margarita")
resilience_table[11,2] = c("Not Documented")

spp_vector

resilience_table$common = c("Cusk-eel", "bumper", "flatfish", "ray-finned fish", "grunt", "ray-finned fish", "ray-finned fish", "mackerel", "barracuda", "cutlass fish", "ray")

resilience_table$researcher = c("Dustin","Dustin","Abigail","Mara","Taylor","Taylor","NA","Maddy","Maddy","Abigail", "Mara")

knitr::kable(resilience_table[ ,1:4])
```

### Combined catch estimate of parameters

```{r}
total_aurita <- tibble(Species = dwf_aurita$Species, Catch=(dwf_aurita$Catch + ssf_aurita$Catch), Year=dwf_aurita$Year)

total_aurita_traits <- cmsy2(year=total_aurita$Year, catch=total_aurita$Catch, r.low=0.47, r.hi=0.77)

plot_dlm(total_aurita_traits)
datalimited2::resilience(species=c("Sardinella aurita"))
```

```{r}
options(scipen=999)
total_ref_pts <- total_aurita_traits[["ref_pts"]]
total_ref_ts <- total_aurita_traits[["ref_ts"]]
total_viable_k_values <- total_aurita_traits[["k_viable"]]
total_mean_k <- mean(total_viable_k_values)*1000
total_mean_k # 11,916,913
```

### Biological Model Formula

$$
B_{t+1} = B_t + (\frac{\Omega + 1}{\Omega} ) g \beta + 1-(\frac{B_t}{K})^{\Omega} - gf_tb_t
$$

### Profit function from biological model estimates

-   $\Pi$ = marginal profit

$$
\Pi_{t} = pH_t - cF_t^{\beta}
$$

## Ideal profit scenario

-   $\Pi_{MSY}$ = ideal marginal profit under sustainable exploitation

$$
\Pi_{MSY} = p_{MSY}f_t b_t - c(f_t g )^{\beta}
$$

$$ 
\text{Biological Model:} \\
\mathrm{B_{t+1}^{DWF}= B_{t}^{DWF}+ \frac{\Phi+1}{\Phi}gB_{t}^{DWF}(1-\frac{B_{t}^{DWF}}{K})^\Phi-H_{t}^{DWF}} \\ ~ \\
\mathrm{B_{t+1}^{SSF}= B_{t}^{SSF}+ \frac{\Phi+1}{\Phi}gB_{t}^{SSF}(1-\frac{B_{t}^{SSF}}{K})^\Phi-H_{t}^{SSF}} \\
\text{Profit Function:} \\
\mathrm{\Pi_{t}^{DWF}=(1-\alpha)pH_{t}^{DWF}-\frac{cH_{t}^{DWF}}{X_t} }
$$ $$
\mathrm{B_{1,t+1} = D_{1,1}[B_{1,t}+ \frac{\Phi+1}{\Phi}gB_{1,t}(1-\frac{B_{1,t}}{K_{1}})^\Phi-H_{1,t}]  \\ ~~~~~~~~~~~+ D_{2,1}[B_{2,t}+ \frac{\Phi+1}{\Phi}gB_{2,t}(1-\frac{B_{2,t}}{K_{2}})^\Phi-H_{2,t}]}
$$

$$ 
\mathrm{\Pi_{1,t}=p_{1}H_{1,t}-c_{1}F_{1,t}} \\ \mathrm{\Pi_{2,t}=p_{2}H_{2,t}-c_{2}F_{2,t}} \\ ~ \\ \mathrm{H_{i,t}=F(B_{i,t},C_{i,t},F_{i,t})}
$$

$$
max_\alpha,\pi_1,\pi_2\sum_{t = 1}^{T}{(\beta(\pi_1) + (1-\beta)(\alpha\pi_2))}
$$

## Biological Parameter Estimates

```{r}
prev_estimates = tibble(Species = c("S. aurita","S. maderensis","S. aurita","S. aurita"), State=c("Cote d'Ivoir", "Liberia", "Senegal", "Mauritania"), M_yr=c(1.49, 0.81, 0.473, 0.32), F_yr=c(0.61, 0.794, NA, NA), L50=c(23.42, NA, NA, NA))

prev_estimates = prev_estimates %>% 
  mutate(Z=M_yr+F_yr) %>% 
  mutate(A= 1-exp(-Z)) %>% 
  mutate(S=1-A)

knitr::kable(prev_estimates, align='c')
```

## Creating Abundance function

```{r}

abundance = function(int_state, S0, S1, S2, M, FR1, FR2, effort, period) {
  
  O=vector(mode="numeric", length=0)
  Y=vector(mode="numeric", length=0)
  J=vector(mode="numeric", length=0)
  
  O[1]=int_state 
  Y[1]=8500 #define this 
  gamma1=0.28
  gamma2=0.40
  J[1]=gamma1*Y[1] + gamma2*O[1]
  A2=M+FR2 # both of these need to be between 0 and 1 and A cannot be > 1
  A1=M+FR1
  
  for(i in 2:period) {
    
    Y[i]=S0*J[i-1]-A1*Y[i-1]-S1*Y[1]
    
    O[i]=S1*Y[i-1]-A2*O[i-1] + O[i-1]
    
    J[i]=gamma1*Y[i] + gamma2*O[i]
  }
  
  return(data.frame(Old=O, Young=Y, Juvenile=J))
}

test = abundance(int_state=10000, S0=0.85, S1=0.50, S2=0.2, M=(1-exp(-0.81)), FR1=0.40, FR2=0.43, effort=1, period=11)
```

$$
\mathrm{log_{10}(M)=-0.0066 - 0.279*log_{10}(L_{\infty})+0.6543*log_{10}(K)+0.4634*log_{10}(T) \\
\text{T = mean water temp C} \\
\text{K = growth coefficient} \\ 
\text{Solving for M:} \\ 
M =10^{-0.0066}*10^{-0.279*log_{10}(L_{\infty})}*10^{0.6543log_{10}(K)}*10^{0.4634log_{10}(T)} \\ 
M=10^{-0.0066}*L_{\infty}^{-0.279}*K^{0.6543}*T^{0.4634}}
$$

## Solving this in R for given parameters

```{r}
tmax=c(13.11,9.15, 10.89,6.39,10.81,9.91,4.58,4.75,12.22,3.97,10.77)
tmax_est=mean(tmax)
to=c(-0.87,1.46,-1.78,-.94,-.6,-.69,-.21,-.24,-.99,-.06,-.76)
to_est=mean(to)
Linf_vect=c(41.6,37,39.4,36.3,40.7,45.9,37.3,42,42.1,36.5, 35.4)
Linf_estimate=mean(Linf_vect)
K_vect=c(.26, .39, .32, .41, .33,.36,.97,.6,.28,1.21,.26)
K_est=mean(K_vect)
FM=c(55,52,55,50.5,51.1)
FM_est=mean(FM)
M=c(.22,.32,.27,.47,.27,.3,.65,.63,.24,.75,.27)
M_est=mean(M)

Mfunc = function(Linf, K, Temp){
  
  X=-0.0066-(0.279*log10(Linf))+(0.6543*log10(K))+(0.4634*log10(Temp))
  M=10^X
  # M = 10^(-0.0066)*(Linf^(-0.279))*(K^(0.6543))*(Temp^(0.4634))
  
  return(M)
}
Vfunc=function(M){
  V=1-exp(-M)
  return(V)
}
M1 = Mfunc(Linf=31.5, K=0.78, Temp=27)
v1=1-exp(-M1)
M2 = Mfunc(Linf=Linf_estimate, K=K_est, Temp=27)
v2=1-exp(-M2)
v_est=1-exp(-M_est)
```

\$\$ \mathrm{\frac{dN_{i}}{dt}=S_{i-1}(t)N_{i-1}(t)-A_{i}N_{i}(t)-S_{i}(t)N_{i}(t) \\~ \\
S_{i-1}(t)=1-[MR_{i}(t)+FR_{i}(t)]} \\ \~\\ FR\_{i}(t)=\frac{Y_{i}(t)}{B_{i}(t)}=q\_{i}f(t)\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\~\text{     }\~\~\~\~\~\~\~\~\~\~ \\ \~ \\

\mathrm{N_{i}=\text{Number of fish in age class "i"} \\
S_{i} = \text{Survival rate} \\
MR_{i}=\text{Natural mortality rate} \\
FR_{i}=\text{Fishing mortality rate} \\
A_{i}=\text{Total mortality rate} \\
}

\$\$
